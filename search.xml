<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[操作系统Review]]></title>
    <url>%2F2018%2F05%2F05%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FReview%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[程序的链接与装载]]></title>
    <url>%2F2018%2F05%2F05%2F%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%A3%85%E8%BD%BD%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[linux-指令Review]]></title>
    <url>%2F2018%2F05%2F04%2Flinux-%E6%8C%87%E4%BB%A4%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[1 进程相关 1.1 ps top pstree kill 1.2 bg fg &amp; Ctrl+Z 2 用户相关 2.1 用户基本basics 2.2 su sudo 3 查询 grep 进程相关1.1 ps top pstree killpsps (pocess status),查看进程状态 ,所查看的状态是静态的，是查询时间瞬时的状态。 top动态地状态。 kill利用grep查询1.2 bg fg &amp; Ctrl+Z什么是前台，后台？相对于终端？ jobs列出后台挂起和运行的程序 command + &amp; -&gt; 后台运行前台运行 + Ctrl Z -&gt;后台-挂起后台-挂起 + bg %num - &gt; 后台-运行后台 + fg %num -&gt;前台 终端关闭后仍运行Linux 技巧：让进程在后台可靠运行的几种方法 nohupsetsid&amp;disownscreen2.1 用户基本basicsLinux是一个多用户操作系统，我们需要以一个身份登录，一个系统也需要以一个身份运行。 不同的用户有着不同的权限，这样可以通过限制用户的权限来达到管理资源与权限的目的。 每一个用户都有一个UID，即user id. 每一个用户都属于一个主组，一个或者多个附属组。 每个组拥有一个GroupID。 每个进程以一个用户身份运行，并受该用户可访问的资源限制。 每个可登录用户拥有一个指定的shell。 用户分为以下三种: root用户 (ID为0的用户为root用户) 系统用户 (1 – 499 非强制，而是惯例) 普通用户 (500以上) 系统中的文件都有一个所属用户及所属组。 查看用户信息 使用id命令可以显示当前用户的信息。 命令whoami显示当前用户名 命令who显示有哪些用户已经登录系统 命令w显示有哪些用户已经登录并且在干什么 使用passwd命令可以修改当前用户密码。 可以通过useradd创建，usermod修改与userdel删除用户 可以通过groupadd创建，groupmod修改，groupdel删除组 配置文件 /etc/passwd /etc/shadow 详细信息可参见linux用户和用户组管理-Runoob 2.2 su vs sudo2.2.1 su做什么？su和sudo是经常容易弄混的两个命令。我们知道，root用户具有全部权限，然而普通用户只有部分权限。譬如普通用户不可以..。为了能够执行这些需要这些权限的命令，就需要获得超级用户权限。 su,sudo两者相同的地方在于都可以通过获得超级用户(superuser , or root , or admin on windows.)权限来执行一些受限操作。 su 命令的作用是切换用户(switch user)。其后接用户名，即可切换至该用户。 直接su命令不接用户则默认切换至root用户。（需要输入目标用户的密码，Ubuntu Linux密码记忆时间为15分钟5，Mac OSX为5分钟） 切换到目标用户后，可使用exit,或者logout命令来注销该用户，然后返回到原用户。 查看su文档如下 名称 su - 更改用户 ID 或成为超级用户 大纲 su [选项] [用户名] 描述 su 用于让用户在登录期间变成另外一个用户。后边不带 username 使用时，su 默认会变成超级用户。可选的选项 ...... 选项 ..... .... 2.2.2 sudo做什么？ sudo 命令的作用是用超级用户权限执行单个命令. 需要输入当前用户密码 eg: $ sudo rm -rf / sudo -i为了频繁的执行某些只有超级用户才能执行的权限，而不用每次输入密码，可以使用该命令、执行该命令后提示符变为“#”而不是“$” sudo susudo su即以超级用户权限运行su命令(切换至root用户)，因为sudo命令是输入当前用户密码。所以在不知道root用户密码的情况下，可以使用该命令切换至root用户，但是只需要当前用户的密码。 2.2.3 su与sudo的区别 [1] su stands for switch (or substitute) user. With no user name given, it defaults to switching to root. It prompts for the password of the user you&apos;re switching to. sudo is used to run a command as root (i.e., with root permissions), or as other users. It prompts for your password, and checks that you&apos;re allowed to use sudo. [2] 扩展阅读一:Linux下 su命令与su - 命令有什么区别？ su 是切换到其他用户，但是不切换环境变量（比如说那些export命令查看一下，就知道两个命令的区别了） su - 是完整的切换到一个用户环境 所以建议大家切换用户的时候,尽量使用 su - linuxso 这样 否则可能发现某些命令执行不了 扩展阅读二:su和sudo的区 别 由于su 对切换到超级权限用户root后，权限的无限制性，所以su并不能担任多个管理员所管理的系统。如果用su 来切换到超级用户来管理系统，也不能明确哪些工作是由哪个管理员进行的操作。特别是对于服务器的管理有多人参与管理时，最好是针对每个管理员的技术特长和 管理范围，并且有针对性的下放给权限，并且约定其使用哪些工具来完成与其相关的工作，这时我们就有必要用到 sudo。 通过sudo，我们能把某些超级权限有针对性的下放，并且不需要普通用户知道root密码，所以sudo 相对于权限无限制性的su来说，还是比较安全的，所以sudo 也能被称为受限制的su ；另外sudo 是需要授权许可的，所以也被称为授权许可的su； sudo 执行命令的流程是当前用户切换到root（或其它指定切换到的用户），然后以root（或其它指定的切换到的用户）身份执行命令，执行完成后，直接退回到当前用户；而这些的前提是要通过sudo的配置文件/etc/sudoers来进行授权； References[1] sudo-su-vs-su-linux [2] su External Linkshow-use-sudo-and-su-commands-linux-introduction]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[openmp入门]]></title>
    <url>%2F2018%2F04%2F26%2Fopenmp%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"></content>
      <tags>
        <tag>并行计算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用mysql写存储过程与触发器]]></title>
    <url>%2F2018%2F04%2F26%2F%E7%94%A8mysql%E5%86%99%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%A7%A6%E5%8F%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[#数据库系统与应用 实验1 Report PB15121708 方林涛目录实验题目 实验环境 实验内容以及结果： 建表 插入测试数据 查询测试 存储过程 触发器 实验题目设某图书馆数据库包含下面的基本表： Book（ID: char(8)，name:varchar2(10)，author:varchar2(10)，price:float， status: int）图书号 ID 为主键，书名不能为空。状态（status）为 1 表示书被借出，0 表示在馆，默认值为 0。 Reader（ID:char(8)，name:varchar2(10)，age:int，address:varchar2(20)） 读者号 ID为主键。 Borrow（book_ID:char(8)，Reader_ID:char(8)，Brrrow_Date:date， Return_Date:date）其中：还期 Return_Date 为 NULL 表示该书未还。主键为（图书号，读者号），图书号为外键，引用图书表的图书号，读者号为外键，引用读者表的读者号 1、 创建上述基本表，并插入部分测试数据；2、 设计例子，验证实体完整性、参照完整性、用户自定义完整性；3、 用 SQL 语言完成下面小题，并测试运行结果：4、 设计存储过程，实现对 Book 表的 ID 的修改。5、 设计触发器，实现：当一本书被借出时，自动将 Book 表中相 应图书的 status 修改为1；当某本书被归还时，自动将 status 改为 0。 实验环境Mysql 5.7.20 MacOSX 建表1.11.21.3 插入测试数据 查询测试1. 1select id,address from reader where name = &apos;Rose&apos;; 2. 123select book.name,datediff(return_date,borror_date) as Days from borrow,reader,book where book_id = book.id and reader_id = reader.id and reader.name = &apos;Rose&apos;; 3. 123456mysql&gt; select reader.name from reader -&gt; where -&gt; reader.id not in -&gt; ( -&gt; select distinct reader_id from borrow -&gt; ); 4. 1select name,price from book where author = &apos;Ullman&apos;; 5. 1234567select book.id,book.name from book,reader,borrow wherereader.id = borrow.reader_id and book.id = borrow.book_id and reader.name = &apos;Lilin&apos; and datediff(curdate(),return_date)&lt;0; 12345select reader.name from reader,borrow where reader.id = borrow.reader_id group by reader.id having count(*)&gt;=3; 12345678select reader.name,reader.id from reader,borrow where borrow.reader_id = reader.id and book_id not in(select distinct book_id from borrow,reader where borrow.reader_id = reader.id and reader.name = &apos;Lilin&apos;) 1select name,id from book where name like &apos;%Oracle%&apos;; 9. 12select reader_id,count(*) from borrow_view V where datediff(curdate(),borrow_date)&lt;=365 group by reader_id; 存储过程123456789DELIMITER $create procedure modify_bookid(in old_id char, in new_id char)begin set foreign_key_checks = 0;update book set id = new_id where id = old_id; update borrow set book_id = new_id where book_id = old_id; set foreign_key_checks = 1;end$ 测试call modify_bookid(&apos;0&apos;,&apos;9&apos;)$ 触发器 CREATE PROCEDURE 存储过程名称( IN/OUT 参数 数据类型 ...) BEGIN END create procedure modify_bookid( in old_id char, in new_id char) begin set foreign_key_checks = 0; update book set id = new_id where id = old_id; update borrow set book_id = new_id where book_id = old_id; set foreign_key_checks = 1; end$ create trigger borrow_insert after insert on borrow for each row begin if datediff(curdate(),new.return_date)&gt;=0 then update book set status = 0 where id = new.book_id; else update book set status = 1 where id = new.book_id; end if; end$ 插入测试数据前book，borrow表 插入测试数据后borrow，book表]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Basic Data Structures Review]]></title>
    <url>%2F2018%2F04%2F23%2FBasic%20Data%20Structures%2F</url>
    <content type="text"><![CDATA[1 Tree 1.1 Definition 1.2 Operation 1.3 性能分析 &amp; 计算相关问题 1.4 Implementation 1.4.1 二叉树的遍历 1.4.2 二叉搜索树的操作 2 Linked List 3 Stack &amp; Queue 4 Heap 5 String 6 Hash 今天，复习一下基本的数据结构。顺带解决一些小问题。 要解决的问题 BST的定义？key可以相等吗? Binary Search Tree 与最小堆之间的区别? 完全二叉树等的概念歧义问题？ BST的平均高度？为什么？平均是什么意思？ 1 Tree1.1 Definition1.1.1 Tree 树在计算机科学中，树是一种被广泛使用的数据结构/ADT，树模仿自然界中树的层次结构。关于树的确切定义，可以使用递归的方式来定义。即：(Recursive Defintion)树是一些节点的集合。这个集合可以是空集。若非空，则一棵树由一个称作根root的节点，以及0个或者多个非空的子树构成。这些子树中的每一棵都与root有一条边链接。 图1：一棵树的实例： 1.1.2 Binary Tree 二叉树二叉树是一棵树，其中每个节点至多有两个儿子。 1.1.3 Binary Search Tree 二叉搜索树(BST)二叉搜索是特殊的二叉树。 每一个有节点有一个Key键值。对于树中的每个节点X，它的左子树中的所有Key＜X.Key (≤X.Key).右子树中的所有Key＞X.Key(≥X.Key)。(关于上述两种不同的定义情况，其本质问题即使BST是否允许存在两个节点Key相等？)这个我在不同的书中看到了不同的定义[1]中给出的定义是不可以相等。[2]中给出的定义是可以。即树中的每个节点X,左子树中的所有Key≤X.Key.右子树中的所有Key≥X.Key. 我个人认为：对于大部分情况而言，我们更倾向于不存在Key值相同的情况。这样即符合很多实际情况，又能够简化问题。 当然，也可以引入带有Key值相等的情况，这需要再实现上考虑这个问题。具体见[2]思考题12.1. （而且[2]的算法皆是按照在不存在key值相等的情况下编写的） Binary Search Tree 与最小堆之间的区别： 二叉搜索树的节点的左右孩子是有序的，left.key &lt; parent.key &lt; right.key 而最小堆，其左右孩子是无序的，也没有大小关系。{left.key ,right.key}&gt; parent.key 对于最小堆而言,查找最小值是O(1)的，由于其左右孩子无大小关系，其查找任意一key则是O(n)的。 二叉搜索树与最优二叉搜索树： 最优二叉搜索🌲 动态规划 1.1.4 其他Type的树Perfect Binary TreeA perfect binary tree is a binary tree in which all interior nodes have two children and all leaves have the same depth or same level. Full Binary Tree每个节点的度为0或2 。A full binary tree (sometimes referred to as a proper or plane binary tree)is a tree in which every node has either 0 or 2 children.图2： A full binary tree Complete Binary Tree所有层全充满，除了最后一层。且最后一层的节点从左向右填充。综上，即上述定义来自维基百科，此为最为广泛使用的定义。然后不同的文献之间定义却存在歧义。主要在于完全二叉树的问题上。 譬如说，在一些国外教程以及国内教材中【完全二叉树】一词指上图中的complete binary tree，而在算法导论中【完全二叉树】一词指上图中perfect binary tree。用【近似的完全二叉树】一词表示上图中的complete binary tree。 国内教材中 满二叉树 指 perfect binary tree 完全二叉树 指 complete binary tree 算法导论[2]中： 满二叉树 指 perfect binary tree 近似的完全二叉树 指 complete binary tree 完全二叉树 指 perfect binary tree 知乎上有一个讨论此问题的问题为什么说“满二叉树也是完全二叉树? 同样的，对于树的深度depth和高度height不同的作者也都有不用的定义。见:What is the difference between tree depth and height? link另外，对于根节点的标记有的从0开始也有的从1开始。 先序序列为a,b,c,d 的不同二叉树的个数是n个结点构成的不同二叉树个数为 c(n,2n)/(n+1) 【卡特兰数】 AVL树why AVL?对于BST而言，其查询插入删除的时间复杂度都是O(h),h为树的高度。 一个不好的消息是BST的最坏时间复杂是O(n)。即BST的高度最坏可以达到O(n)，这也不难理解。 试想一颗总是朝着一个方向生长的二叉树。 它的高度便是O(n)。为了提高性能，我们的出发点便是控制树高。 使得树高不至于那么高(O(n)级别)。 为了能够控制树高，我们期望树更加平衡些。即左右子树高度相差不是很大。譬如说，我们可以限制对于任意一个节点，其左右子树的高度相等。这样的话，树的高度就会受限，不会疯狂的朝着一个方向生长。 然而这样的条件比较苛刻。 不容易满足。于是我们可以限制每一个节点左子树和右子树的高度最多差1。这样的话既可以控制树高，又不是那么难以满足。 what ?AVL树即平衡 二叉搜索树 其以发明者 Adelson-Velsky and Landis命名。 AVL 树 == BBST（Balanced Binary Search Tree） 一颗AVL树是其每一个节点左子树和右子树的高度最多差1的二叉搜索树。AVL树是自平衡的，即使在插入删除操作中，它可以自己调整(Rotate)从而使得满足AVL树条件。 AVL树的每一个结点都有一个平衡因子Balanced Factor:为该结点的左子树的深度减去它的右子树的深度。对于AVL树而言对于任一节点N，有BalanceFactor(N) ∈ {–1,0,+1} AVL树的深度和logN是同数量级的(其中的N为结点个数) （why?） Huffman树如何构建?性质树中一定没有度为1的结点 ASLhuffman树与最优二叉搜索树的区别 线索二叉树前序和后序线索化之后，空链域为1中序线索化后，空链域为2 n个结点的线索二叉树上含有的线索数为 2n - (n-1) = n+1 1.1.5 高级树结构B 树红黑树基数树Treap树1.2 Operation 操作 二叉树 遍历 （前序/中序/后序/层次） 二叉搜索树BST 插入/删除 搜索 Note: 对于所有遍历操作，不论是递归实现还是迭代实现，其时间复杂度都是O(n)。 (why?) 1.3 性能分析 &amp; 计算相关问题1.3.1 二叉树Binary Tree对于遍历操作，不论是递归实现还是迭代实现，其时间复杂度都是O(n)。 1.3.2 二叉搜索树Binary Search Tree:[3] 对于插入，删除，查找操作其复杂度都是O(h) ，这是显而易见的。接下来的问题便是h到底是多少，h与n的关系了.对于树的深度而言，其 最坏深度为O(n) ，这是显而易见的。 平均深度 O(log n) 这导出两个问题， 1.为什么是O(log n)? 如何证明之 2.在这里平均的意义(含义)又是什么？ 关于问题1，我在[1],[2]中找到了相关的说明。 [2] 中定理12.4 证明了一颗有n个不同关键字的随机构建二叉搜索树的期望高度是O(log n ) NOTE: 在这里随机构建的含义即是，考虑n个不同的节点，其所有排列情况是n!中，对于每一种情形按次序依次插入一个元素构建BST， 注意只有插入操作，而没有删除操作。这样的构建过程叫做随机构建。 12.4节中同样证明了，一颗有n个不同关键字的随机构建二叉搜索树的期望高度是O(log n ) 。 但是对于既存在插入操作，又存在删除操作的BST，其平均深度在[2]中并未做说明。 If deletions are allowed as well as insertions, &quot;little is known about the average height of a binary search tree&quot; [1] 中证明了，有n个节点，假设所有的树出现的机会相等时，则树平均深度为O(log n)证明过程见下Weisss-p78在这里，我认为其含义同[2]，即随机构建，虽然[1]中貌似并未明确其平均含义。 对于既存在插入操作，又存在删除操作的情况下， [1]中给出了如下结论： 已经证明，如果我们交替插入和删除θ(n^2)次，那么树的期望深度是θ(根号n) 1.3.3 相关计算设层数从1开始，即根节点为第1层，共有k层。 那么第i层，最多有2^(i-1)个节点。 整棵树，最多有2^0 + 2^1 + … 2^(k-1) = 2^k -1 若叶子节点即读书为0的节点有m个，度数为2的节点有n个，那么 m = n + 1 若整棵树有N个节点，设其高度为h。那么有[2^(h-1)-1] + 1 ≤ N ≤ 2^h - 1 即floor(log2(N)) + 1 后者ceil(log2(N+1)) 1.4 Implementation 实现1.4.1 Tree 遍历1.4.2 二叉搜索树的操作二叉树的重构所谓重构即使，在不知道二叉树结构的情况下，从二叉树的先序中序后序遍历序列中重构出二叉树的结构。可以证明：采用 (先序遍历 || 后序遍历) + 中序遍历 可以重构出二叉树。采用 先序遍历 + 中序遍历 不可以重构出二叉树 至于为什么？相关证明参见数据结构-二叉树重构 那么如何重构？[1]: 数据结构与算法分析 C语言描述 Weiss [2]: 算法导论 CLRS 3th Edition [3] https://en.wikipedia.org/wiki/Binary_search_tree]]></content>
      <tags>
        <tag>data structures</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个弱鸡的找实习经历]]></title>
    <url>%2F2018%2F04%2F21%2F%E4%B8%80%E4%B8%AA%E5%BC%B1%E9%B8%A1%E7%9A%84%E6%89%BE%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86%2F</url>
    <content type="text"><![CDATA[4-2日投递：爱奇艺（ Up主质量等级划分， 深度学习开发工程师-实习-）优酷， （算法工程师-机器学习）商汤 (见习算法开发工程师-暑期实习)，去哪儿，（开发）瓜子 (数据挖掘)微众银行(NT-信息安全(数据挖掘方向))顺丰，（大数据挖掘与分析实习生）蘑菇街,拼多多，(算法)旷视，（暑期实习生算法研究员）百度，（商务搜索部机器学习/数据挖掘实习工程师）小米,58转转（开发）七牛云 （算法）作业帮滴滴POI（数据挖掘研发），地图事业部（算法）51信用卡 （算法实习生）cvte (中央研究院 数据挖掘实习生)虎牙 （数据挖掘实习生） 待投递：ebay PayPal 第四范式 新笔试：七牛云（算法） 4-13 （19：00）今日头条 4-15 （10：00）瓜子(数据挖掘) 4-15 (10:00)58(开发) 4-15 （20：00）微众银行 4-16 (19:00)美团 4-20(19:00) 简历挂:阿里，百度 ，滴滴，爱奇艺，优酷，商汤，拼多多，蘑菇街，小米，虎牙，快手，作业帮，去哪儿，顺丰 瓜子，微众银行待定 无结果 笔试挂:微软，头条，华为，京东，美图，七牛云，58网易游戏 笔试通过、收到面试: 艾耕（3-30），旷视(4-19) , 微软（4-26）收到offer:艾耕 Face++ 面试 12345678910111213141516171.讲讲自己用做的项目 2.问熟悉哪些语言...python python is ==的区别？ python方法解析顺序 m*k n*k两矩阵计算欧几里得距离np.tile？ 3.问上了哪些课？ elf 的 bss段？ ip报文经过一个路由器改变哪些字段？ 4.Batch normalization ？ group convolution ？ 5 .a,b~U[0,1]，互相独立 求Max(a,b) 期望]]></content>
      <categories>
        <category>Job</category>
      </categories>
      <tags>
        <tag>实习</tag>
        <tag>internship</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于比较的的排序]]></title>
    <url>%2F2018%2F04%2F21%2F%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E7%9A%84%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[Toaday I’m going to review some important sorting algorithms based on comparison.Besides,related data structures such as heap,priority queue will also be talked. 1 堆排序 &amp;&amp; 优先队列 2 选择排序，插入排序，冒泡排序 3 快速排序 4 相关笔试题分析 1 堆排序 &amp;&amp; 优先队列1 堆排序 &amp;&amp; 优先队列 目录： 1.1 什么是堆? what and why? 1.1.1 what？ 1.1.2 关于二叉堆 Binary Heap 1.1.3 why ? 1.2 堆的实现？什么二叉堆？ 1.2.0 什么是二叉堆？ binary heap? 1.2.1 堆的实现 二叉堆 1.2.2 斐波那契堆的实现 1.2.3 二项堆堆的实现 1.3 堆的相关操作？ 堆排序？ 1.3.1 Max-Heapify 1.3.2 Build-Max-Heap 1.3.3 HeapSort 1.3.4 关于优先队列の操作 1.4 堆的优缺点? 堆排序分析. 1.4.1 堆的优缺点 1.4.2 性能分析 1.5 优先队列 what and why? 堆与优先队列的关系？ 1.5.1 什么是优先队列？Priority Queue 1.5.2 为什么是要使用优先队列？ why? 1.5.3 Links between Heap and Priority Queue ? 1.6 优先队列的实现 性能分析？ 1.6.1 Naive Implementation 1.6.2 Usual Implementation 1.6.3 Specialized Heaps Implementation 1.6.4 性能分析 1.7 Java，Python中的Heap，Priority Queue的实现 1.7.1 Java中的实现 1.7.2 Python中的实现 1.8 References &amp; Externel Links 1.8.1 References 1.8.2 Externel Links In this Section,we’ll go deeply to reveal concrete definitions of Heap,Binary Heap,and Priority Queue and difference between them.Basic Concepts and Methods will also be talked but not that specifically. 1.1 什么是堆？Heap?1.1.1 what？很多人以为堆 == 二叉堆 == 优先队列 他们之间的关系真的是相等的吗？ [Conclusion at section 1.5.3] 在英语中，heap作为动词 把..堆起/使成堆 的意思。作为名词是堆/很多的意思。1964年，J. W. J. Williams 发明了堆排序(Heap Sort)[1]，同时描述了如何利用二叉堆来实现一个优先队列。 使用该种数据结构可以高效的获取队列中的最大值或者最小值，从而进行排序操作。（关于二叉堆见1.2,什么是优先队列见1.4 ） 之后，后人不断加以改进，产生了一系列不同的堆.比如k-叉堆，斐波那契堆，二项堆，左式堆，斜堆等等。 见堆变体#Variants)。 从最初William的二叉堆用于堆排序，到后来的各式各样的堆，基本都是以树的形式表示。因此说 堆是一共基于树的数据结构。 维基百科也有说：A heap is a specialized tree-based data structure that satisfies the heap property。 所谓的heap property(堆的性质)即是大根堆/小跟堆的性质(所有父节点≥/≤子节点)。 因此，亦可以说堆不是一个数据结构，而是一类数据结构[this is my personal opinion]。 1.1.2 关于二叉堆 Binary Heap 二叉堆是一种堆。 维基百科上说： A binary heap is a heap data structure that takes the form of a binary tree. Binary heaps are a common way of implementing priority queues.[2] 显而易见的，将堆与二叉堆划等号（堆heap == 二叉堆bianry heap），显然是一个不成熟的想法。 heap != bianry heap,that is to say , heap is a class of data structures.but binay heap is a common type of heap. 它们与优先队列的关系将会在1.4中简要探讨。 1.1.3 why ?既然知道了什么是堆，那么为什么要用堆呢？williams为什么要引入它呢。它又有哪些优点呢。我认为，对于传统的大根堆或者小跟堆而言，最大值/最小值分别处于root节点位置.(为什么？)这方便我们从中读/取最大值，最小值，这是一个O(logn)的操作。相对于数组而言，这有显著的性能提升。因此堆适用于那些需要频繁取最大/最小值的应用。 1.2 堆的实现？什么二叉堆？堆采用树结构实现。对于不同的堆有不同的树实现。 1.2.0 什么是二叉堆二叉堆是一种堆，二叉堆广泛地被使用，以至于，当我们谈论堆时，通常默认指的就是二叉堆。二叉堆也是优先队列的一种常见的实现。 （什么是优先队列见1.4 ） 二叉堆基于二叉树是实现，除了是二叉树之外，还需要满足下面两个条件。1.Shape property :一个二叉堆是一个完全二叉树。在此含义即是所有的层（除了最后一层）都是满的，只有最后一层不是满的，而且最后一层的节点从左向右依次填充。2.Heap property: （大根堆）对于所有的父亲节点而言，其值≥子节点。 （小根堆）对于所有的父亲节点而言，其值≤ 子节点。 【注意可以等于】 1.2.1 二叉堆的实现对于最常见的二叉堆：他使用二叉树来实现，这个二叉树是一个完全二叉树(完全二叉树在不同的文献中有着不同的含义，在此处我们取所有的层（除了最后一层）都是满的，只有最后一层不是满的，而且最后一层的节点从左向右依次填充。见维基百科-完全二叉树) 逻辑上，二叉堆是一棵树。 物理上，二叉堆常用数组来实现。而不需要指针。这样可以获得较好的性能。(考虑为什么可以？) 如下图所示：逻辑结构：物理结构： 1.2.2 斐波那契堆的实现待续 1.2.3 二项堆的实现待续 1.3 堆的相关操作？ 堆排序？对于不同的heap，我们有不同的操作，在此，我们先对最为广泛的二叉堆进行阐述。【本部分主要采自算法导论第三版 &amp;&amp; 只针对大根堆（小根同理）】【注：大根堆 == 最大堆，小根堆 == 最小堆】 Max-Heapify 维护大根堆的性质。O(log n) Build-Max-Heap 从无序的输入数据数组中构造一个大根堆。 O(n) HeapSort O(nlog n ) 对一个数组进行[原址]排序。 Max-Heap-Insert,Heap-Extract-Max,Heap-Increase-Key,Heap-Maximum【O(1)】过程、时间复杂度均为O(log n )功能是利用二叉堆实现一个优先队列。 【此处只是列出了算法伪代码以及算法思想，比较晦涩，最好还是找到具体的例子(譬如算法导论上就可以找到)，配合算法，会有更加深刻的理解，此处限于篇幅就不做举例了】 1.3.1 Max-HeapifyMax-Heapify(A,i) 自顶向下维护大根堆性质。 O(log n) 1.3.2 Build-Max-HeapBuild-Max-Heap(A) 从最后一个非叶子节点开始，到根节点一次调用Max-Heapify(A,i)【此算法的复杂度是O(n) 而不是O(n log n)试想为什么？】【算法导论上有证明】 1.3.3 HeapSortHeapSort(A) O(n log n )思想：每次从root节点取出最大值，然后调整。即：从最后一个节点开始，将其调换A1]，将脱离堆，从根节点开始调整堆。 1.3.4 优先队列の操作Max-Heap-Insert,Heap-Extract-Max,Heap-Increase-Key,Heap-Maximum【O(1)】过程、时间复杂度均为O(log n )功能是利用二叉堆实现一个优先队列。these operations are implemented to implement a priority queue.the operations above ,i.e. Max-Heapify,Build-Max-Heap ,HeapSort are enough for heapsort. Max-Heap-Insert,在大根堆中插入一个元素并调整之 Heap-Extract-Max,取出最大值即根节点，然后调整之 Heap-Increase-Key,将某个节点增加一定的值，然后调整之 Heap-Maximum，返回根节点的值 1.4 堆的优缺点? 堆排序分析.1.5 堆与优先队列的关系？ 优先队列what and why?1.5.1 什么是优先队列？Priority Queue优先队列是一种类似于队列的数据结构。熟悉数据结构的我们知道，队列是一种允许在一段进行插入(入队)以及另一端进行删除(出队)的数据结构。 它是一种FIFO类型的数据结构。 队列在很多方面都有很多应用，比如在cache(替换策略),进程/作业调度方面。 而，在很多情况下，我们需要考虑不同元素的优先权不同，譬如在操作系统调度中，有一种叫做SJF的算法(即最短作业有限),在此，优先级就是执行作业的用时长短。这种情况下，用基本的先入先出的队列就不能胜任了。因此，引入了一种叫做优先队列(Priority Queue )的数据结构。优先队列中的每一个节点都有对应的优先级。 在不同的应用中采用不同的指标作为优先级。 优先队列满足至少以下两种操作[4] Insert 插入/入队 将一个节点插入到优先队列 Deelete Min/Max 删除最小值/最大值，或者称之为Min/Max出队. 其实可以将Stack,Queue作为优先队列的两种特殊情况(为什么？) 也可以将优先队列看做为队列的一种修改，当出队时，总是出优先级最大/小的节点。 1.5.2 为什么是要使用优先队列？ why?引入了优先队列，可以方便的执行插入以及取最大/最小值的操作。在很多应用中，这两种操作频繁出现。 我认为优先队列 一方面，其插入,取最大/最小值操作在很多应用中频繁使用，满足了这些应用的需求。 另一方面，使用堆来实现的优先队列具有很好的性能。这使得我们更加倾向于使用它们。(关于性能见1.5) 维基百科上列举了优先队列的一些重要应用[3]： Bandwidth management Discrete event simulation Dijkstra&apos;s algorithm Huffman coding Best-first search algorithms ROAM triangulation algorithm Prim&apos;s algorithm for minimum spanning tree 1.5.3 Links between Heap and Priority Queue ?优先队列常使用堆Heap来实现，但是优先队列与堆在概念上是不同的。优先队列是一种抽象数据结构ADT(逻辑上)，它可以有很多实现(物理上)，譬如堆，数组，链表等。但是最常见且最高效的实现是采用堆来实现。 到目前为止，我们理清了三者之间的关系。so 堆 != 二叉堆 != 优先队列 != 堆Heap : 二叉堆，k-叉堆，二项堆，斐波那契堆，斜堆，etc..PQ : Priority Queue(ADT) 。Many kinds of Implementations二叉堆是堆的一种，常用于实现优先队列。 1.6 优先队列的实现 性能分析？1.6.1 Naive Implementation有很多非常simple的实现优先队列的方法，比如无序列表Unordered List。尽管Simple，但是性能却不佳。对于无序列表而言，插入操作是O(1)的，出队Extract-Min/Max 却是O（n）的，因为要搜索整个列表。 1.6.2 Usual Implementation为了提高性能，堆被引入作为实现。普通的二叉堆具有O(log n )的performance for inserts and removals。and O(n) to build initially。普通二叉堆的变体，斐波那契堆， pairing heaps提供了更好的性能。 1.6.3 Specialized Heaps Implementation有一些特殊的堆结构，可以提供附加一些的操作(除1.5.1中的两种),或者在一些特殊的数据类型上性能优于普通的堆。见[3] 1.6.4 性能分析下图为采用不同的堆作为优先队列时，相关操作的时间复杂度。【此为最小堆】【采自维基百科，注释略之】 1.7 Java，Python中的Heap，Priority Queue的实现1.7.1 Java中的实现Class PriorityQueue 1.7.2 Python中的实现heapq模块实现了二叉堆的功能,可以用来实现优先队列以及Heapsort。为Min-Heap.且下标从0开始。 API Heapify() 给定一List,原地 线性 将其变为最小堆。 Heappop() 从堆中pop最小值，即索引[0]所在元素。 Heappush() 向插入一个元素。 用例 此外还提供了 heapq.nlargest, heapq.nsmallest 用来返回n个最大/最小的元素。 实现HeapSortdef heapsort(iterable): h = [] for value in iterable: heappush(h, value) return [heappop(h) for i in range(len(h))] &gt;&gt;&gt; heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) &gt;&gt;&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 实现优先队列pq = [] # list of entries arranged in a heap entry_finder = {} # mapping of tasks to entries REMOVED = &apos;&lt;removed-task&gt;&apos; # placeholder for a removed task counter = itertools.count() # unique sequence count def add_task(task, priority=0): &apos;Add a new task or update the priority of an existing task&apos; if task in entry_finder: remove_task(task) count = next(counter) entry = [priority, count, task] entry_finder[task] = entry heappush(pq, entry) def remove_task(task): &apos;Mark an existing task as REMOVED. Raise KeyError if not found.&apos; entry = entry_finder.pop(task) entry[-1] = REMOVED def pop_task(): &apos;Remove and return the lowest priority task. Raise KeyError if empty.&apos; while pq: priority, count, task = heappop(pq) if task is not REMOVED: del entry_finder[task] return task raise KeyError(&apos;pop from an empty priority queue&apos;) 最大堆的实现待续ref 1.8 References &amp; Externel Links1.8.1 References[1] : Williams, J. W. J. (1964), “Algorithm 232 - Heapsort”, Communications of the ACM, 7 (6): 347–348 [2] :维基百科-二叉堆 [3] :维基百科-优先队列 [4] : 《数据结构与算法分析 C语言实现》 Weiss Chapter 6 1.8.2 Externel LinksPython使用heapq实现小顶堆（TopK大）、大顶堆（BtmK小） 利用Python实现堆排序 .. 1.2 选择排序，插入排序，冒泡排序1.3 快速排序1.4]]></content>
      <categories>
        <category>algorithms</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>基于比较的排序</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hash Table 基础]]></title>
    <url>%2F2018%2F04%2F20%2FHash-Table-%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[目录1.1 什么是哈希Hash 1.2 哈希函数 Hash Function 1.2.1 哈希函数性质 1.2.2 哈希函数的选择 1.2.3 Perfect Hash Function (PHF) 1.2.4 Minimal Perfect Hash Function (MPHF) [Note] 1.3 什么是哈希表 Hash Table 1.3.1 Key statistics 1.3.2 Dynamic Resizing 1.3.3 ReHashing 1.4 冲突 Collsion 1.4 性能 1.5 哈希表的实现 Implementation 1.5.1 PHF以及MPHF的实现 1.5.2 Java Python 实现 1.6 应用 Applications 1.7 總結 Summary 1.7 References &amp; External Links 1.1 什么是哈希Hash？哈希表的实现 称之为 哈希，抑或 散列。(雜湊 For 台灣 )哈希表在【平均】情况下以常数时间constant time 执行「插入」，「删除」和「查找」的技术。 12为什么平均O(1)？原理？最坏情况下呢？ O(n) 为什么？ 但是对于元素间的【排序】操作将不会得到有效的支持。譬如FindMax,FindMin以及按序打印元素都是散列表所不支持的。[1] 哈希/散列 接收一个值，输出这个值的哈希值 维基百科[2]中有一段对其的介绍： 1234Selected From Wiki-Hash Table [2]: The idea of hashing is to distribute the entries (key/value pairs) across an array of buckets. Given a key, the algorithm computes an index that suggests where the entry can be found. 1.2 哈希函数 Hash Function ？哈希函数是可以将【任意大小】的数据映射为【固定】大小数据的一个函数。其返回数据的哈希值。哈希函数的一个用处是用来实现哈希表Hash Table. 哈希表在计算机科学中被广泛应用以提高查询性能。哈希函数在密码学，Cache , 布隆过滤器，等中也有所应用。[3] 关于具体的哈希函数，请参见List of hash_functions 12345维基百科[3]： A hash function is any function that can be used to map data of arbitrary size to data of fixed size. The values returned by a hash function are called hash values, hash codes, digests, or simply hashes. One use is a data structure called a hash table, widely used in computer software for rapid data lookup. Hash functions accelerate table or database lookup by detecting duplicated records in a large file. 1.2.1 哈希函数性质一个好的哈希函数通常需要满足下列属性。当然，一个哈希函数要满足哪些性质，还要看具体的应用决定。DeterminismUniformityDefined rangeVariable rangeData normalizationContinuityNon-invertible. 关于哈希函数的若干性质，参见Hash Function 维基百科 1.2.2 哈希函数的选择存在着很多各种各样的哈希函数，这些函数都不尽相同。对于特定的应用而言，如何选取合适的哈希函数是一个重要的问题。函数的选择强烈依赖于输入数据的性质, 以及它们在预期应用程序中的概率分布。[3] Trivial hash function 平凡哈希函数，Perfect hashing 完美哈希，Minimal perfect hashing，最小完美哈希，Hashing uniformly distributed data 哈希均匀分布数据，Universal hashing,Rolling hash …等等。具体描述参见Hash Function 维基百科 下面对PHF,与MPHF作进一步学习。当键值是【static(即固定不变)】的时候，我们可以涉及方案使得最差情况下的查询性能也很出色。由此引入了 PHF 最坏时间O(1), 与MPHF 最坏时间O(1),空间O(n)。 1.2.3 Perfect Hash Function (PHF)?即【沒有冲突】的哈希函数[2] no collisions即：[5] 函数 Hash 将 N 个 Key 值映射到 M 个整数上，这里 M&gt;=N 对于任意的 Key1 ，Key2 ， Hash( Key1 ) != Hash( Key2 ) 如何construct? 见[4] 拓展： Dynamic perfect hashing 【动态完美哈希函数】 Minimal perfect hash function 【最小完美哈希函数 】 Order preservation 【保序最小完美哈希函数】 key I &lt; key J 等价于 Hash(key I ) &lt; Hash(key J ) 满足 Minimal perfect hash function 1.2.4 Minimal Perfect Hash Function (MPHF)?在1.2.3 Perfect Hash Function (PHF)中，若M==N,则为MPHF. 123维基百科[4]:A minimal perfect hash function is a perfect hash function that maps n keys to nconsecutive integers – usually the numbers from 0 to n − 1 or from 1 to n 123456789101112NOTE:静态[5]通常情况下，PHF或MPHF是针对静态集合的。也就是，在使用PHF或MPHF时，所有的 KEY 值是事先已知并且固定的。不过，这里有针对动态集合的一个算法（我没有仔细看，不敢肯定）[6]缺点：一是必须事前必须知道原数据集，二是需要花一定的CPU来生成这个函数。我认为，对于数据仓库类的线下搜索应用，这个算法是有用武之地的。但对于强调实时的数据业务，这个算法是不适合的。 1.3 什么是哈希表[7] ?哈希表是一种基于键-值(key-index) 的数据结构。哈希表通过哈希函数实现key , index的转换。 123456[7]Selected From Wiki-Hash Table : In computing, a hash table (hash map) is a data structure which implements an associative array abstract data type, a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets orslots, from which the desired value can be found. 在很多情况下，哈希表在平均性能上【优于】 搜索树以及 table lookup structure。因此哈希表在计算机领域中得到广泛应用，尤其是涉及数组，数据库索引，Cache和Set. 1.3.1 Key statistics load factor = n/k n is the number of entries k is the number of slots load factor 过大，冲突可能性增加；load factor 过小，空间的浪费。 1.3.2 Dynamic Resizing动态调整大小 123For example, in Java&apos;s HashMap class the default load factor threshold fortable expansion is 3/4 and in Python&apos;s dict, table size is resized when load factor is greater than 2/3 1.3.3 Rehashing O(n) 1.4 冲突冲突问题优于哈希函数不一定是完美哈希函数或者是slots过少，因此可能会导致冲突发生，产生冲突可以有多重方法加以解决。 解决办法 分离链接法 开放定址法 线性探测 平凡探测 Rehash 1.4 性能[7]In the simplest model, the hash function is completely unspecified and the table does not resize. For the best possible choice of hash function, a table of size k with open addressing has no collisions and holds up to k elements, with a single comparison for successful lookup, and a table of size k with chaining and n keys has the minimum max(0, n − k) collisions and O(1 + n/k) comparisons for lookup. For the worst choice of hash function, every insertion causes a collision, and hash tables degenerate to linear search, with Ω(n) amortized comparisons per insertion and up to n comparisons for a successful lookup. Adding rehashing to this model is straightforward. As in a dynamic array, geometric resizing by a factor of b implies that only n/bi keys are inserted i or more times, so that the total number of insertions is bounded above by bn/(b − 1), which is O(n). By using rehashing to maintain n &lt; k, tables using both chaining and open addressing can have unlimited elements and perform successful lookup in a single comparison for the best choice of hash function. In more realistic models, the hash function is a random variable over a probability distribution of hash functions, and performance is computed on average over the choice of hash function. When this distribution is uniform, the assumption is called “simple uniform hashing” and it can be shown that hashing with chaining requires Θ(1 + n/k) comparisons on average for an unsuccessful lookup, and hashing with open addressing requires Θ(1/(1 − n/k)).[25] Both these bounds are constant, if we maintain n/k &lt; c using table resizing, where c is a fixed constant less than 1. 1.5 Implementation 实现1.5.1 PHF以及MPHF的实现关于PHF以及MPHF的实现，这位博主已经给了较好的总结，我不认为我可以比他总结的更好。于是就照搬过来吧。参见 ：完美哈希函数（Perfect Hash Function） 的【PHF和MPHF生成程序库】以及【PHF和MPHF生成算法】部分。 1.5.2 Java Python 实现待续 1.6 应用 Applications待续 1.7 總結 Summary哈希表作为常数平均时间查询与插入的数据结构。采用哈希函数实现。哈希函数常常是不完美的因此会产生冲突问题，对此也有一系列的解决方法。哈希表也可以动态调整。完美哈希函数在一些库中已经得到了较好的实现。哈希表在Java等编程语言中也得到了实现。哈希表作为一个优秀的数据结构在计算机科学的很多领域都发挥着重要的作用。 1.8 References &amp; External LinksReferences[1] 数据结构与算法-C语言描述[Mark Allen Weiss] Chapter 5 [2] Hash Table维基百科 [3] Hash Function 维基百科 [4] Perfect Hash Function维基百科 [5] 完美哈希函数（Perfect Hash Function）- Blog [6] 最小完美哈希函数简介-Blog [7] Hash_table维基百科 External LinksDistributed hash table Calculate hash of a given value by Timo Denk]]></content>
      <categories>
        <category>data structures</category>
      </categories>
      <tags>
        <tag>data structures</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分值策略]]></title>
    <url>%2F2018%2F01%2F02%2F%E5%88%86%E5%80%BC%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[函数的增长]]></title>
    <url>%2F2018%2F01%2F01%2F%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E9%95%BF%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第12章二叉检索树]]></title>
    <url>%2F2017%2F11%2F10%2F%E7%AC%AC12%E7%AB%A0%E4%BA%8C%E5%8F%89%E6%A3%80%E7%B4%A2%E6%A0%91%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第13章 红黑树]]></title>
    <url>%2F2017%2F11%2F10%2F%E7%AC%AC13%E7%AB%A0%E7%BA%A2%E9%BB%91%E6%A0%91%2F</url>
    <content type="text"><![CDATA[13.1 Propery of black-red tree 红黑树是一种特殊的二叉检索树，它的每一个节点附加有一个color属性，其值为black或者是red。 且满足以下五个性质： 每一个节点的color属性要么是红，要么是黑。 根节点是黑色的。 叶子节点都是NIL，而且都是黑色的。 两个红色的节点不可能是父子关系。 对于任何一个节点，从该节点出发到它的所有子孙叶子节点的这一段路径中，所经过的黑色节点的个数相同。 黑高bh(x) [不包含x自身以及为NIL的叶子节点] 引理 13.1 一个有n个内部节点的红黑树高度至多有2lg(n+1) * prove * 首先由归纳法证明任意节点x，它的字数中，至少包含2^bh(x)-1个内部节点 13.2 旋转 O(1)13.3 插入 O(logn)]]></content>
      <categories>
        <category>CLRS</category>
      </categories>
      <tags>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第1，2，3章-算法基础以及渐进符号]]></title>
    <url>%2F2017%2F11%2F08%2F%E7%AC%AC1%EF%BC%8C2%EF%BC%8C3%E7%AB%A0-%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%BB%A5%E5%8F%8A%E6%B8%90%E8%BF%9B%E7%AC%A6%E5%8F%B7%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第4章-分治策略]]></title>
    <url>%2F2017%2F11%2F08%2F%E7%AC%AC4%E7%AB%A0-%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第6，7，8，9章-排序]]></title>
    <url>%2F2017%2F11%2F08%2F%E7%AC%AC6%EF%BC%8C7%EF%BC%8C8%EF%BC%8C9%E7%AB%A0-%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第16章-贪心算法]]></title>
    <url>%2F2017%2F11%2F08%2F%E7%AC%AC16%E7%AB%A0-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[第15章-动态规划]]></title>
    <url>%2F2017%2F11%2F08%2F%E7%AC%AC15%E7%AB%A0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[分治法应用宝典]]></title>
    <url>%2F2017%2F11%2F08%2F%E5%88%86%E6%B2%BB%E6%B3%95%E5%BA%94%E7%94%A8%E5%AE%9D%E5%85%B8%2F</url>
    <content type="text"><![CDATA[大整数的乘法 分治法 X=a×2^(n/2)+bY=c×2^(n/2)+d XY=（a×2^(n/2)+b ）×（c×2^(n/2)+d）即 ac×2^n+(bc+ad)×2^(n/2)+bd 所以有T(n)=4T(n/2)+O(n),T(1)=O(1) T(n)=O(n^2)同暴力解法时间复杂度相同 XY = ac×2^n - ((a-b)(c-d)-ac-bd)× 2^n/2 + bdXY = ac×2^n + ((a+b)(c+d)-ac-bd)×2^n/2 + bd T(n)=3T(n/2)+O(n) T(1)=O(1) T(n)=O(n^log3)=O(n^1.59) DFT快速傅里叶变换 O(nlgn) 至今未找到现行时间的算法 strassen矩阵相乘 暴力解法 O(n^3) strassen O(n^log7) 残缺棋盘问题to be continued 最近点对to be continued 快速傅里叶变换to be continued]]></content>
      <categories>
        <category>CLRS</category>
      </categories>
      <tags>
        <tag>algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十七章 摊还分析]]></title>
    <url>%2F2017%2F11%2F03%2FAmortized-Analysis%2F</url>
    <content type="text"><![CDATA[what is 摊还分析 即求数据结构的一个操作序列中所执行所有操作的平均时间。 不考虑概率，保证最坏情况下每个操作的平均性能 Methods aggregate analysis 聚合分析 counting method 核算法 potential method 势能法 17.1聚合分析 聚合分析令每个操作的摊还代价相等。算出n个操作的总时间上界T(n),则每个操作的的摊还代价是T(n)/n For example: 栈操作 PUSH,POP,POP(k) n个操作的代价之至多是O(n) 为什么？每个操作的摊还代价是O(n)/n=O(1) 二进制计数器递增 Increment T(n)=O(n) O(n)/n=O(1) 17.2 accounting method credit accounting method 为每一种操作分配一个摊还代价c。对于n个操作，若当操作的实际代价real小于摊还代价，则结余credit,为c-real; 若当前操作的实际代价real小于摊还代价，则从之前存储的credit中取出real-c For example: 栈操作 | |分配摊还代价 | 实际代价 | —|———|——– |PUSH | 2 | 1 | |POP |0 | 1 || POP(k)| 0 | k | 则每一次PUSH操作，摊还代价一个用于实际代价，一个存入credit，用于pop时使用、 每一个栈中的值都具有一个额外的credit pop指令，使用已经存储的一个credit 二进制计数递增器 略 17.3 potential method 略略略习题解答 solutions for CLRS 链接:http://pan.baidu.com/s/1mikmehU 密码:pbon 17.1.1 O(k) 考虑最坏情形即为此 17.1.2 略 17.1.3 求和即可 17.2.1 push 2 1pop+1copy pop pop(k) 0 17.2.2 设摊还代价为0，若i is a power of 2 其他情况下，摊还代价为2，即可 17.2.3 略 17.3.1 设𝞥’(Di)=𝞥(Di)-𝞥(Di-1),𝞥(0)=0即可 17.3.2 略 17.3.3 设𝞥(D)=nlgn 17.3.4O(n) + sn-s0 本章余略]]></content>
      <categories>
        <category>CLRS</category>
      </categories>
      <tags>
        <tag>algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web mining]]></title>
    <url>%2F2017%2F11%2F03%2Fmining%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Git docs学习笔记]]></title>
    <url>%2F2017%2F10%2F30%2FGit-docs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1.1 起步-关于版本控制 什么是版本控制系统(version control system.VCS)? 版本控制是一种记录一个或者若干个文件内容的变化，以便将来查阅特定版本修改情况的系统。版本控制系统可以对任何类型的文件进行版本控制，但大多数情况下开发者是对源代码文件作版本控制。 有哪些类型的版本控制系统？ 本地版本控制系统 它的工作原理是在硬盘上保存补丁集，所谓补丁是指文件修订前后的变化；通过应用所有的补丁，可以重新计算出各个版本的内容。 集中式版本控制系统 本地版本控制系统只适用于单个开发者。 遇到需要多个开发者协同工作的时候，本地版本控制系统就没用了。于是集中式的版本控制系统（centralized version control system,CVCS）应运而生。这类系统，诸如CVS,Subveision,Perforce等，都有一个单一的几种管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连接到这一台服务器，取出最心底额文件或者提交更新，多年以来，这已经成为版本控制系统的标准做法。 这种做法带来了很多好好粗，特别是相对于老式的本地CVS来说。每个人都可以在一定程度智商看到项目中其他人在做什么。而管理员也可以轻松掌握每个开发者的权限，并且管理一个cvcs要远比在各个客户端上维护本地数据库来的轻松容易。 这种做法最显而易见的缺点是中央服务器的故障，如果宕机一小时，那么在这一小时内，谁都无法更新，也都无法协同工作。如果中心数据库磁盘发生损坏，又没有做恰当备份，毫无疑问，将丢失所有的数据-包括项目的真个变更历史，只剩下各自机器上保留的单独快照。本地版本控制也存在这样的问题，只要项目的历史记录都被保存在同一个位置，就会有丢失所有历史记录的风险。 分布式版本控制系统 于是分布式版本控制系统（distributed version control system，DVCS）面世了，在这类系统中，像Git,Mercurial,Bazar,darcs等，客户端并不只提取最新版本的文件快照，而是把整个代码仓库完整的镜像下来，这么一来，任何一处系统工作用的服务器发生故障，事后都可以 用任何一个镜像出来的本地仓库恢复，因为每一次克隆操作都是一次对代码仓库的完整备份。 1.2 起步-Git简史同生活中很多伟大的事物一样，Git诞生于一个极富纷争大举创新的时代。Linux内核开源项目有着为数众多的参与者，绝大多数Linux内核维护工作都花在提交补丁和保存归档的繁琐事务上（1991-2002年间）、到2002年，整个项目组开始启动一个专有的分布式版本控制系统Bitkeeper来管理和维护代码。到了2005年，开发bitkeeper的商业公司同Linux内核开源社区的合作关系结束，他们收回了Linux内核社区免费试用bitkeepr的权力，这就迫使Linux开源社区特别是Linux的缔造者linus torvalds基于bitkeeper是的经验与教训，开发出自己的版本控制系统，他们对新的系统制定了若干目标: 速度 简单的设计 对非线性开发模式的强力支持 完全分布式 有能力高效管理类似Linux内核一样的超大规模的项目 自诞生于2005年以来，Git日臻完善成熟，在高度易用的同时，仍然保留着初期设立的目标，它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性管理系统。 1.3 起步-Git基础 Git和其他版本控制系统的主要差别在于对待数据的方法。其他系统将他们保存的信息看作是一组基本文件和每个文件随时间逐步积累的差异。 而Git不按照以上方式对待或者保存数据，Git对待数据更像是一个快照流 近乎所有操作都可以本地执行 Git保证完整性 Git的所有数据在存储之前都计算校验和，然后以校验和来引用，这意味着不可以在Git不知情的情况下，更改任何文件或者目录内容，这个功能建构再给他底层，是构成Git哲学不可或缺的部分，若你在传送过程中，中丢失信息或损坏文件，Git就能发现。 Git用以计算校验和的机制叫做SHA-1散列（hash，哈希）。这是一个由四十个十六进制字符组成的字符串，基于Git文件的内容或者目录计算出来。SHA-1看起来是这样： 24b9da6552252987aa493b52f8696cd6d3b00373 Git中使用这种哈希值的情况很多，你将经常看到这种哈希值。实际上，Git数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。 Git一般只添加数据 你执行的Git操作 ，几乎只往Git数据库中添加数据。很难让Git执行任何不可逆操作，或者让他以任何方式清除数据。同别的vcs一样，未提交更新时有可能丢失或弄乱修改的内容，但是一旦你提交快照到Git中，就难以再丢失数据，特别是，你定期的推送数据库到其他的数据库的话。 这使得我们使用Git成为一个安心愉悦的过程，因为我们甚至可以尽情的做各种尝试，而没有把事情弄糟的风险。 三种状态 Git有三种状态，你的文件可以处于其中之一，已提交（commited),已修改（modified），和已暂存（staged)。 Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。 暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区域。 基本的 Git 工作流程如下： 在工作目录中修改文件。 *暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。 如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。 在Git 基础一章，你会进一步了解这些状态的细节，并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。 1.4 起步-命令行1.5 起步-安装Git1.6 初次运行Git前的配置git自带一个git config的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置： –system 此电脑–global 此用户–local 此仓库 /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的 git config 时，它会从此文件读写配置变量。 ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。 –local 每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。 用户信息当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改： git config –global user.name “John Doe”git config –global user.email johndoe@example.com 再次强调，如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。 文本编辑器既然用户信息已经设置完毕，你可以配置默认文本编辑器了，当 Git 需要你输入信息时会调用它。 如果未配置，Git 会使用操作系统默认的文本编辑器，通常是 Vim。 如果你想使用不同的文本编辑器，例如 Emacs，可以这样做： git config –global core.editor emacs 检查配置信息如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。 git config –listuser.name=John Doeuser.email=johndoe@example.comcolor.status=autocolor.branch=autocolor.interactive=autocolor.diff=auto 你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与 ~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。 你可以通过输入 git config ： 来检查 Git 的某一项配置 git config user.nameJohn Doe 1.7 获取帮助三种方式： git help config git config –help man git-config q quit 1.8 总结2.1Git基础-获取Git仓库 在现有的目录中初始化仓库 git init 仅仅完成初始化的操作，项目的文件还没有被追踪。 如果是一个已经存在的非空文件夹中初始化Git仓库来进行版本控制的话，应该开始追踪(add）这些文件并提交（commit）。git initgit add *.cgit add LICENSEgit commit -m “initial project version” 克隆现有的仓库 git clone url 当前目录新建仓库名文件夹，初始化.git文件夹，从元车行仓库拉取下所有数据放入.git文件夹，然后从中读取最新版本的文件的拷贝。 也可以自己自定义本地仓库的名字：git clone url myrepository git支持多种数据传输协议，http://, git:// ssh传输协议 2.2 Git基础-记录每次更新到数据库untracked(已创建，未追踪）changes to be commited (已经暂存staged，未提交commited）Changes not staged for commit (未暂存not staged） Git add：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态 2.3Git基础-查看提交历史git log查看提交历史 2.4 Git基础 撤销操作git commit –amend 重新提交 覆盖上次提交信息 git reset HEAD file_name 撤销暂存 git checkout file_name 撤销修改 2.5Git基础-远程仓库的使用git remote git remote -v q 退出 git config –help git help config man git-config]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[argparse库学习]]></title>
    <url>%2F2017%2F10%2F30%2Fargparse%E5%BA%93%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[argparse库是Python的命令行解析模块。 使用步骤： 导入库 import argparse 创建解析对象parser parser=argparse.ArgumentParser() 加入参数 parser.add_argument() 进行解析 args=parser.parse_args() ArgumentParser() 参数prog,usage,description,epilog都是用来修改帮助（–help,-h)中输出的内容。 测试用例 -h 结果 参数parents表示继承关系，继承parents list中所有parent对象的所有的参数 parents[parent1 ,parent2,….] 其他的比较少用，具体意义及用法参见文档，就不赘述了。 add_argument() 可选参数，其他位置参数 nargs 参数数量 N，* ，+，？ action store(默认）,store_const,store_true,store_false, append,append_const,count,help,version) default 默认值 type string（默认）,file ,int ,float choices 可供选择值 required 是否必选 reference: python argparse docs python命令行解析库argparse python argparse用法总结]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>argparse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac环境变量配置及其理解&软连接]]></title>
    <url>%2F2017%2F10%2F28%2Fmac%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%85%B6%E7%90%86%E8%A7%A3-%E8%BD%AF%E8%BF%9E%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[什么是环境变量所谓环境变量，通俗的理解就是命令的路径譬如我的mac里安装了jdk1.6,jdk1.8那么当我执行javac指令的时候，改使用哪一个版本呢？ 这个时候就可以通过设置环境变量来确定。 export JDK1.7=/usr/apps/jdk1.7export JDK1.8=/usr/apps/jdk1.8export PATH=$JDK1.7/bin 通过这样，将jdk1.7加入环境变量，即指定我默认的jdk版本是1.6 对于其他的命令亦此。 环境变量的作用就是就是用户可以在操作系统的各个目录之下，都能访问到所需要的工具目录内的内容。 mac的环境变量 查看当前环境变量 echo $PATH 分为全局用户环境变量，以及单个用户环境变量。 全局用户环境变量在： /etc/bashrc /etc/profile 单个用户的环境变量在 ~/.bash_profile 一般在~/.bash_profile修改环境变量，不需要修改全局用户变量 注：全局环境变量只有root用户才有权限修改，对于普通用户是只读的，用户要sudo才可以修改。 sudo vim /etc/bashrc 修改环境变量 cd ~vim .bash_profileexport PATH=…..:$PATHsource .bash_profile 如果是修改或者是新增环境变量的值，要source一下才会生效。 什么是软连接？硬连接 硬链接 异名同体 软连接 快捷方式 reference: Linux软连接和硬链接 Mac 中环境变量的配置和理解]]></content>
  </entry>
  <entry>
    <title><![CDATA[MacDown的基本使用]]></title>
    <url>%2F2017%2F10%2F27%2FMacDown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[最近一直在寻找Mac上的比较好用的markdown编辑器，由于mac平台上有太多MarkDown编辑器，Typora，Mou,Ulysses,iA Writer，等等，工具太多，不知道如何选择，我索性就都下载下来，一个个试用，最后感觉还是macdown我比较喜欢。Macdown的好处是，使用简单，它的界面分为两栏，左栏编辑，右栏实时预览，我觉得这样很好，比较适合我这样的Markdown新手。好吧，下面介绍一下什么是Macdown以及基本语法。 什么是Macdown?MacDown是一个开源的，MarkDown语法编辑器，用于macOS平台。类似于Mou; here is the download link. 如果你安装了homebrew的话，可以直接用brew安装:brew cask install macdown Macdown的基本语法同其他编辑器一样，语法无非是标题，链接，图片，代码块什么的。 换行 行末加两个空格，然后回车 强调 加黑 **要加黑的内容** eg:我变黑了 加黄 &lt;mark&gt;要加黄的内容&lt;/mark&gt; eg:我是黄的 删除线 &lt;del&gt;要删除的内容&lt;/del&gt; eg：别删我 上脚注 我在下面&lt;sup&gt;我在上面&lt;/sup&gt; 我在下面我在上面 标题 这个不多说了，#，##，，，######标题依次为一级，二级，，六级，字号依次减小 特别的，使用二级标题的时候，在标题下面后有一条水平线 加链接以及图片 直接加链接：&lt;url&gt;即可，即直接在链接两侧加上&lt; &gt; 给链接起名字 [name](url)即可， 在文章中添加很多链接会显得很凌乱，特别是当链接比较长的时候，这样的情况下，我们可以这样做。将定义统一放在文章末尾，文中进行引用即可。 定义：[name]:URL引用：[name] 引用图片方法和上面类似，图片可以在本地，也可以通过url 定义：[picture name]:URL or PATH引用：![picture name] 插入代码 行代码只需要在其两侧加 `符号即可。 include&lt;stdio.h&gt; 插入代码块可以通过，缩进4个空格，或者代码块两端加。注意：插入代码块之前要空一行 块引用 first second term eg: fisrtsecondthird term1 term2 水平线*三个星号 表格 name number laji 1512 name score —– —— flt 100 laji 0 name number laji 1512 name score flt 100 laji 0]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>macdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ictclass 简介]]></title>
    <url>%2F2017%2F10%2F27%2Fictclass-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[lucene简介]]></title>
    <url>%2F2017%2F10%2F27%2Flucene%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Mac docker安装]]></title>
    <url>%2F2017%2F10%2F26%2FMac-docker%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[ifconfig命令学习笔记]]></title>
    <url>%2F2017%2F10%2F26%2Fifconfig%2F</url>
    <content type="text"><![CDATA[ifconfig=interfaces config 命令格式： ifconfig [网络设备][参数] 功能 查看和配置网络设备，当网络环境发生改变的时候可以通过该命令对网络进行相应的配置。 命令参数 up 启动相应的网络设备/网卡 down 关闭指定的网络设备/网卡 arp 设置指定网卡是都支持ARP协议 -promisc 设置是否支持网卡的promiscuous模式 -allmulti 设置是否支持多播模式，如果选择该参数，网卡将接受网络中所有的多播数据包 -a 显示全部接口信息 -s 显示摘要信息 add 给指定网卡配置ipv6地址 del 删除指定网卡的ipv6地址 mtu&lt;字节数&gt; 设置网卡的最大传输单元 netmask&lt;子网掩码&gt; 设置网卡的子网掩码 tunel 建立隧道 dsaddr 设定一个远端地址，建立点对点通信 -broadcst&lt;地址&gt; 为指定网卡设置广播协议 -pointtopoint&lt;地址&gt; 为网卡设置点对点通讯协议 multicast 为网卡设置组播标识 address 为网卡设置IPV4地址 使用实例 查看设备信息 第一行：连接类型：以太网 硬件地址即MAC地址：… 第二行：inet 地址表示网卡的IP地址：10.211.55.5广播地址：10.211.55.255子网掩码：255.255.255.0 第六行：网卡的状态 UP:网卡处于开启状态 RUNNING：网卡的网线被插上 MULTICAST：允许组播 MTU=1500：最大传输单元1500字节 关闭开启网卡 sudo ifconfig eth1 down sudo ifconfig eth1 down 删除/添加ipv6地址 sudo ifconfig eth1 del/add ipv6-addr before after 修改MAC地址 sudo ifconfig eth1 hw ether MAC_ADDR 修改IP地址 sudo ifconfig eth1 IP_ADDR netmask ADDR broadcasr ADDR 其他操作 关闭或启动arp协议 ifconfig eth1 arpifconfig eth1 -arp 设置最大传输单元 ifconfig eth1 mtu 1500 Note:用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了参考：reference]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ifconfig</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pl0笔记]]></title>
    <url>%2F2017%2F10%2F26%2Fpl0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[#pl0笔记 ##第一部分 pl0语言及其编译器 pl0语言介绍 pl0设计语言是一个比较简单的语言，它以赋值语句为基础，构造概念有顺序，条件，循环三种。pl0有子程序的概念，包括过程定义（可以嵌套）与调用且有局部变量说明。pl0唯一的数据类型是整型，可以用来说明该类型的变量和常量。当然pl0也具有通常的算术与逻辑运算。具体的pl0语法图如下所示。 pl0语言编译器 pl0编译器的基本工作流程如下图所示： 语法分析完成以下工作 1.跳过分隔符，即空格，回车，制表符 2.识别保留字，如begin，end，if ，while等 3.识别非保留字的 一般标志符，将次标志符赋值给全局量id，而全局量sym赋值为sym_identifier 4.识别数字序列，当前值赋值给全局量num,sym被赋值为sym_number 5.是被：=,&lt;=,&gt;=等特殊符号，全局量sym被赋值为sym_becomes,sym_leq,sym_gtr等。 相关函数有getsym(),getch(),其中getch()为获取单个字符函数，除此之外，它还完成: 识别且跳过行结束符 将输入源文件复写到输出文件 产生一份程序列表，输出相应行号或者指令计数器的值注意getch()识别一个字符后，文件指针指向下一个，而getc()不会。 语法分析 ###pl0的指令集 pl0的指令集包含7种指令，分别是：（1) LIT 将常数压栈（2) LOD 将变量值压栈（3) STO 将栈顶的值赋予某变量（4) CAL 过程调用（5) INT 在数据栈中分配存储空间（6) JMP,JPC 用于if,while语句的条件或者无条件控制转移指令（7) OPR 算术逻辑指令 指令格式 F,L,A的含义见下表 ![ins]]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F10%2F25%2F%E5%B0%8F%E7%BB%86%E8%8A%82%2F</url>
    <content type="text"><![CDATA[###MAC ifconfig 输出结果 123456789* lo 回环接口(loop back) 或者 本地主机(localhost)* gif 通用 IP-in-IP隧道(RFC2893)stf 6to4连接(RFC3056)* en 以太网或802.11接口* fw IP over FireWire(IEEE-1394), macOS特* 有p2p Point-to-Point 协议* awdl airdrop peer to peer(一种mesh network), apple airdrop设备特有* bridge 第2层桥接* vlan 虚拟局域网络* 在iOS设备(支持cellular)上还能看到pdp_ip 蜂窝数据连接 Reference-from-Zhihu ###mac查看端口被程序占用情况lsof -i tcp:port number 查到程序PID后，可以kill PID]]></content>
  </entry>
</search>
